using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssLoader
{
    /// <summary>
    /// The static class contains methods to get instances of <see cref="Subtitle{TScriptInfo}"/> from ass files.
    /// </summary>
    public static class Subtitle
    {
        private enum section
        {
            Unknown = 0,
            ScriptInfo,
            Styles,
            Events
        }

        internal static readonly string[] EditorInfo =
        {
            "; This file is generated by AssLoader",
            "; https://assloader.codeplex.com",
            ";"
        };

        /// <summary>
        /// Parse the <see cref="string"/> of ass file.
        /// </summary>
        /// <typeparam name="TScriptInfo">Type of the container of the "script info" section of the ass file.</typeparam>
        /// <param name="subtitle">A <see cref="string"/> of ass file.</param>
        /// <returns>A <see cref="Subtitle{TScriptInfo}"/> presents the ass file.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="subtitle"/> is null.</exception>
        /// <exception cref="ArgumentException"><paramref name="subtitle"/> contains an ass file of wrong format.</exception>
        public static Subtitle<TScriptInfo> Parse<TScriptInfo>(string subtitle) 
            where TScriptInfo : ScriptInfoCollection, new()
        {
            ThrowHelper.ThrowIfNull(subtitle, "subtitle");
            using(var reader = new StringReader(subtitle))
                return Parse<TScriptInfo>(reader);
        }

        /// <summary>
        /// Parse the <see cref="TextReader"/> of ass file.
        /// </summary>
        /// <typeparam name="TScriptInfo">Type of the container of the "script info" section of the ass file.</typeparam>
        /// <param name="reader">A <see cref="TextReader"/> of ass file.</param>
        /// <returns>A <see cref="Subtitle{TScriptInfo}"/> presents the ass file.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="reader"/> is null.</exception>
        /// <exception cref="ArgumentException"><paramref name="reader"/> contains an ass file of wrong format.</exception>
        public static Subtitle<TScriptInfo> Parse<TScriptInfo>(TextReader reader) 
            where TScriptInfo : ScriptInfoCollection, new()
        {
            ThrowHelper.ThrowIfNull(reader, "reader");
            try
            {
                var re = new Subtitle<TScriptInfo>();
                var sec = section.Unknown;
                EntryHeader sf = null, ef = null;
                while(true)
                {
                    var temp = reader.ReadLine();
                    if(temp == null)
                        return re;
                    temp = temp.Trim(null);
                    if(string.IsNullOrEmpty(temp) || temp[0] == ';')
                        continue;
                    if(temp[0] == '[' && temp[temp.Length - 1] == ']')
                        switch(temp.ToLower())
                        {
                            case "[script info]":
                            case "[scriptinfo]":
                                sec = section.ScriptInfo;
                                break;
                            case "[v4+ styles]":
                            case "[v4 styles+]":
                            case "[v4+styles]":
                            case "[v4styles+]":
                                sec = section.Styles;
                                break;
                            case "[events]":
                                sec = section.Events;
                                break;
                            default:
                                sec = section.Unknown;
                                break;
                        }
                    else
                        switch(sec)
                        {
                            case section.ScriptInfo:
                                re.ScriptInfo.ParseLine(temp);
                                break;
                            case section.Styles:
                                initStyle(re, temp, ref sf);
                                break;
                            case section.Events:
                                initEvent(re, temp, ref ef);
                                break;
                            default:
                                break;
                        }
                }
            }
            catch(Exception ex) when (ex is ArgumentException || ex is FormatException)
            {
                throw new ArgumentException("Error occurs during parsing.", ex);
            }
        }

        private static void initStyle<T>(Subtitle<T> subtitle, string styleLine, ref EntryHeader format) 
            where T : ScriptInfoCollection, new()
        {
            string key, value;
            if(FormatHelper.TryPraseLine(out key, out value, styleLine))
            {
                switch(key.ToLower())
                {
                    case "format":
                        format = new EntryHeader(value);
                        return;
                    case "style":
                        if(format == null)
                            format = StyleFormat;
                        var s = Style.Parse(format, value);
                        try
                        {
                            subtitle.StyleDictionary.Add(s);
                        }
                        catch(ArgumentException)
                        {
                        }
                        return;
                    default:
                        return;
                }
            }
        }

        private static void initEvent<T>(Subtitle<T> subtitle, string eventLine, ref EntryHeader format)
            where T : ScriptInfoCollection, new()
        {
            string key, value;
            if(FormatHelper.TryPraseLine(out key, out value, eventLine))
            {
                if(string.Equals(key, "format", StringComparison.OrdinalIgnoreCase))
                {
                    format = new EntryHeader(value);
                }
                else
                {
                    if(format == null)
                        format = EventFormat;
                    subtitle.EventCollection.Add(SubEvent.Parse(format, string.Equals(key, "comment", StringComparison.OrdinalIgnoreCase), value));
                }
            }
        }

        internal readonly static EntryHeader StyleFormat = new EntryHeader("Name,Fontname,Fontsize,PrimaryColour,SecondaryColour,OutlineColour,BackColour,Bold,Italic,Underline,StrikeOut,ScaleX,ScaleY,Spacing,Angle,BorderStyle,Outline,Shadow,Alignment,MarginL,MarginR,MarginV,Encoding");

        internal readonly static EntryHeader EventFormat = new EntryHeader("Layer,Start,End,Style,Name,MarginL,MarginR,MarginV,Effect,Text");
    }
}
